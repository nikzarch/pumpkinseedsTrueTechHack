from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
import os
import logging

from APIService import APIClient
from PDFService import create_delivery_document

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

api_client = APIClient(timeout=15)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! \n/get_contract - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∑–∞–ø—É–ø–∫–∞–º"
                                    "\n/it_appeal - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ it –æ—Ç–¥–µ–ª—É")


async def get_contract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response_base = api_client.get(
            base_url="https://true.tabs.sale/fusion/v1/datasheets/dstEpz6wPXEZmBzz2R/records?viewId=viwTzNnTm4q4n&fieldKey=name",
            headers={"Authorization": f"Bearer {os.getenv('API_TOKEN')}"}
        )

        response_provider = api_client.get(
            base_url="https://true.tabs.sale/fusion/v1/datasheets/dstSsUFMntVXHRGlUc/records?viewId=viwsLEXf8CSKp&fieldKey=name",
            headers={"Authorization": f"Bearer {os.getenv('API_TOKEN')}"}
        )

        response_product = api_client.get(
            base_url="https://true.tabs.sale/fusion/v1/datasheets/dstR95kW46WwtnVxnw/records?viewId=viwj37ePoX8uk&fieldKey=name",
            headers={"Authorization": f"Bearer {os.getenv('API_TOKEN')}"}
        )

        providers = {p['recordId']: p for p in response_provider['data']['records']}
        products = {p['recordId']: p for p in response_product['data']['records']}
        bases = {}
        bases_providers = []

        for base in response_base['data']['records']:
            bases[base['recordId']] = base
            bases_providers.extend(base.get('fields', {}).get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', []))

        keyboard = []
        for provider in providers.values():
            if provider['recordId'] not in bases_providers:
                continue

            company = provider.get('fields', {}).get('–ö–æ–º–ø–∞–Ω–∏—è', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            keyboard.append([InlineKeyboardButton(
                text=company,
                callback_data=f"supplier_{provider['recordId']}"
            )])

        if keyboard:
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=reply_markup
            )
            context.user_data.update({
                'providers': providers,
                'products': products,
                'bases': bases
            })
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("supplier_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        provider_id = query.data.split("_")[1]
        context.user_data['selected_provider_id'] = provider_id

        contract_keyboard = []

        for base in context.user_data.get('bases').values():
            contract_keyboard.append(
                [InlineKeyboardButton(base['fields']['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞'],
                                      callback_data="contract_" + base['fields']['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞'])]
            )

        reply_markup = InlineKeyboardMarkup(contract_keyboard)

        await query.edit_message_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:",
            reply_markup=reply_markup
        )

    elif query.data.startswith("contract_"):
        contract_number = query.data.split("_")[1]
        provider_id = context.user_data.get('selected_provider_id')

        if not provider_id:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        data = context.user_data
        selected_provider = data['providers'].get(provider_id)

        if not selected_provider:
            await query.edit_message_text("‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            company = selected_provider.get('fields', {}).get('–ö–æ–º–ø–∞–Ω–∏—è', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            phone = selected_provider.get('fields', {}).get('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω')
            email = selected_provider.get('fields', {}).get('–ü–æ—á—Ç–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

            value = 0
            goods_list = []
            for base in data['bases'].values():
                d = base['fields']['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å']
                if (provider_id in base.get('fields', {}).get('–ü–æ—Å—Ç–∞–≤—â–∏–∫', [])
                        and base['fields']['–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞'] == contract_number):
                    skus = base.get('fields', {}).get('SKU', [])
                    for i in range(len(skus)):
                        product = data['products'].get(skus[i])
                        if product:
                            goods_list.append({
                                'name': product.get('fields', {}).get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                                'quantity': base['fields']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].split(',')[i],
                                'price': product.get('fields', {}).get('–¶–µ–Ω–∞', 0)
                            })
                            value = d

            goods_for_pdf = [{
                "name": item['name'],
                "quantity": item['quantity'],
                "price": item['price']
            } for item in goods_list] if goods_list else [{"name": "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "quantity": 0, "price": 0}]

            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {company}\n"
                f"üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {contract_number}\n"
                f"‚òé –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìß –ü–æ—á—Ç–∞: {email}\n"
                f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(goods_list)}\n\n"
                "üîÑ –§–æ—Ä–º–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç..."
            )

            create_delivery_document(
                value=value,
                doc_number=contract_number,
                doc_date="______",
                supplier={
                    "name": company,
                    "phone": phone,
                    "email": email
                },
                buyer={
                    "name": "–û–û–û ¬´–î–∏–∫–∞—è –ß–µ—Ä–µ—à–Ω—è¬ª",
                    "phone": "+7 (999) 990-99-99",
                    "email": "office@cherry.ru"
                },
                delivery_date="______",
                goods=goods_for_pdf
            )

            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=open("delivery_document.pdf", "rb"),
                caption=f"üìÑ –î–æ–≥–æ–≤–æ—Ä ‚Ññ{contract_number} –≥–æ—Ç–æ–≤"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")


async def it_appeal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ä–º–∞ –¥–ª—è –æ–±—â–∞–Ω–∏—è –≤ it –æ—Ç–¥–µ–ª:\nhttps://true.tabs.sale/share/shr5STp9HtQnoeKpYRUaQ")


def main():
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("get_contract", get_contract))
    app.add_handler(CommandHandler("it_appeal", it_appeal))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(supplier|contract)_"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()